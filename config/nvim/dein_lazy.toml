[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']
hook_post_source = '''
let g:neosnippet#snippets_directory='~/.config/nvim/snip'

if has('conceal')
    set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
let g:deoplete#omni_patterns = {}
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'zchee/deoplete-clang'
on_i = 1
on_ft = 'cpp'
depends = ['deoplete.nvim']
hook_source = '''
let g:deoplete#sources#clang#libclang_path = '/usr/local/Cellar/llvm/6.0.1/lib/libclang.dylib'
let g:deoplete#sources#clang#clang_header =  '/usr/local/opt/llvm/lib/clang/'
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_i = 1
on_ft = 'cpp'
hook_source = '''
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
autocmd FileType c,cpp ClangFormatAutoEnable
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = ['open-browser.vim']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
hook_source = '''
au BufRead,BufNewFile *.toml set filetype=toml
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'
hook_source = '''
au BufRead,BufNewFile *.scala set filetype=scala
'''


[[plugins]]
repo = 'lepture/vim-jinja'
on_ft = 'jinja'
hook_source = '''
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja
'''

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
on_i = 1

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'
on_i = 1

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'


[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
on_i = 1
hook_post_source = '''
" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_i = 1
on_ft = 'rust'
depends = ['deoplete.nvim']
hook_source = '''
    " racerバイナリ指定
    let g:racer_cmd = "~/.cargo/bin/racer"
    " rust本体のソースコードパス指定
    let $RUST_SRC_PATH="/Users/hikaru/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src"
'''
